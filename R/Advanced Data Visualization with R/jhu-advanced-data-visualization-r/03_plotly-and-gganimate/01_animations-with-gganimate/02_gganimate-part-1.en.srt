1
00:00:00,000 --> 00:00:01,425
Now that we've learned to make

2
00:00:01,425 --> 00:00:04,265
a wide variety of
different visualizations,

3
00:00:04,265 --> 00:00:06,245
another trick in our bag will be

4
00:00:06,245 --> 00:00:08,980
making those
visualizations animated.

5
00:00:08,980 --> 00:00:11,625
If a picture says
a thousand words,

6
00:00:11,625 --> 00:00:14,460
a moving picture, I
suppose says more.

7
00:00:14,460 --> 00:00:17,700
So some crafted developers
have developed a way to turn

8
00:00:17,700 --> 00:00:21,870
our ggplot visualizations
into moving images.

9
00:00:21,870 --> 00:00:25,980
This is based on a
package called gganimate.

10
00:00:25,980 --> 00:00:29,085
Basically what gganimate
does is it takes

11
00:00:29,085 --> 00:00:31,110
a ggplot figure and

12
00:00:31,110 --> 00:00:33,150
creates many different
versions of it,

13
00:00:33,150 --> 00:00:34,800
changing a single parameter in

14
00:00:34,800 --> 00:00:37,440
the data so the visual changes

15
00:00:37,440 --> 00:00:38,700
by one click of

16
00:00:38,700 --> 00:00:42,315
that parameter for each
frame and the animation.

17
00:00:42,315 --> 00:00:44,640
This is harder to understand

18
00:00:44,640 --> 00:00:46,290
in the abstract than in practice,

19
00:00:46,290 --> 00:00:49,440
so we'll try to move
forward quickly here.

20
00:00:49,940 --> 00:00:53,840
Two good sources for learning
how animations work using

21
00:00:53,840 --> 00:00:57,050
gganimate are the official
documentation for

22
00:00:57,050 --> 00:01:00,620
gganimate at
gganimate.com and also

23
00:01:00,620 --> 00:01:02,450
the R Graph galleries section

24
00:01:02,450 --> 00:01:04,745
on interactive visualizations.

25
00:01:04,745 --> 00:01:06,920
The materials in this
video are adapted

26
00:01:06,920 --> 00:01:09,840
from what you find
on those websites.

27
00:01:11,600 --> 00:01:14,900
As a gganimate
documentation indicates,

28
00:01:14,900 --> 00:01:17,795
building an animation
can get pretty complex.

29
00:01:17,795 --> 00:01:19,250
So what I'm going
to in this video

30
00:01:19,250 --> 00:01:20,780
is give you a verbal walk-through

31
00:01:20,780 --> 00:01:24,025
of one of the examples
from that documentation.

32
00:01:24,025 --> 00:01:25,715
Then in subsequent videos,

33
00:01:25,715 --> 00:01:29,190
we'll go into a little bit
more detail about each step.

34
00:01:30,250 --> 00:01:32,540
So follow along now with

35
00:01:32,540 --> 00:01:34,715
the R code associated
with this video.

36
00:01:34,715 --> 00:01:38,820
Then you'll need to install
several R packages.

37
00:01:40,210 --> 00:01:43,910
Let me start by making a
simple animation based

38
00:01:43,910 --> 00:01:47,065
on that example from the
gganimate documentation.

39
00:01:47,065 --> 00:01:49,490
What this animation
does is it creates

40
00:01:49,490 --> 00:01:52,760
boxplots for the fuel
efficiency of cars

41
00:01:52,760 --> 00:01:55,235
with different numbers of
cylinders in their engines

42
00:01:55,235 --> 00:01:59,140
with different numbers of
gears in their transmissions.

43
00:01:59,140 --> 00:02:02,210
First we'll do a static
version of this plot

44
00:02:02,210 --> 00:02:05,790
and this is easy
review for us by now.

45
00:02:07,070 --> 00:02:11,625
We call a ggplot load
the mtcars data,

46
00:02:11,625 --> 00:02:14,280
and we set our x
and y aesthetics.

47
00:02:14,280 --> 00:02:17,600
In this data, syl or cylinder

48
00:02:17,600 --> 00:02:19,340
is a numeric variable

49
00:02:19,340 --> 00:02:21,440
and we want to treat
that as categorical,

50
00:02:21,440 --> 00:02:24,425
so we will wrap that in
the factor function.

51
00:02:24,425 --> 00:02:26,030
Then for the y aesthetic,

52
00:02:26,030 --> 00:02:29,450
we'll use miles per gallon
for fuel efficiency.

53
00:02:29,450 --> 00:02:31,790
By adding a geom-boxplot,

54
00:02:31,790 --> 00:02:33,470
we now see the distribution of

55
00:02:33,470 --> 00:02:35,390
the miles per gallon
for different 4,

56
00:02:35,390 --> 00:02:37,940
6, and 8 cylinder cars.

57
00:02:37,940 --> 00:02:39,860
As we expect when we do this,

58
00:02:39,860 --> 00:02:41,390
the cars with more cylinders

59
00:02:41,390 --> 00:02:42,860
and therefore bigger engines,

60
00:02:42,860 --> 00:02:45,930
are less fuel efficient.

61
00:02:46,420 --> 00:02:48,860
Now there's this
other variable in

62
00:02:48,860 --> 00:02:51,365
the empty cars data for gears,

63
00:02:51,365 --> 00:02:54,305
with values of 3, 4, or 5.

64
00:02:54,305 --> 00:02:55,790
This indicates how many gears

65
00:02:55,790 --> 00:02:57,910
there are in the transmission.

66
00:02:57,910 --> 00:03:01,220
Let's say that we wanted
to know how miles per

67
00:03:01,220 --> 00:03:03,050
gallon changed as a function

68
00:03:03,050 --> 00:03:05,105
of the number of
cylinders in the engine,

69
00:03:05,105 --> 00:03:07,790
broken down across
vehicles that have 3,

70
00:03:07,790 --> 00:03:10,505
4, or 5 gears in
the transmission.

71
00:03:10,505 --> 00:03:14,615
We can display this using the
facet wrap function telling

72
00:03:14,615 --> 00:03:16,370
R to make separate figures on

73
00:03:16,370 --> 00:03:18,890
the basis of the
gearing for the car.

74
00:03:18,890 --> 00:03:21,660
Again, this is all
review for you.

75
00:03:22,030 --> 00:03:24,230
This is perfectly fine and the

76
00:03:24,230 --> 00:03:26,195
static visual is very useful.

77
00:03:26,195 --> 00:03:28,400
But let's say that we
wanted to manipulate this,

78
00:03:28,400 --> 00:03:31,495
so that we have a single
figure that changes.

79
00:03:31,495 --> 00:03:35,330
What we do is we swap out

80
00:03:35,330 --> 00:03:36,980
our facet wrap function with

81
00:03:36,980 --> 00:03:39,395
a transitions states function,

82
00:03:39,395 --> 00:03:42,835
and that comes from
the gganimate package.

83
00:03:42,835 --> 00:03:45,500
We'll go over more
the details later.

84
00:03:45,500 --> 00:03:47,180
But with transition states,

85
00:03:47,180 --> 00:03:49,910
what you're doing is you can
indicate the variable in

86
00:03:49,910 --> 00:03:53,515
the data that you want to
change across animations.

87
00:03:53,515 --> 00:03:55,860
We'll specify that here and we'll

88
00:03:55,860 --> 00:04:01,930
save this figure to an object.

89
00:04:02,660 --> 00:04:05,549
If we run the object,

90
00:04:05,549 --> 00:04:07,430
R is going to render

91
00:04:07,430 --> 00:04:09,815
the different frames
of the animation.

92
00:04:09,815 --> 00:04:12,620
When you run it, you'll see
that animation will move

93
00:04:12,620 --> 00:04:16,175
between the different states
that we specified here.

94
00:04:16,175 --> 00:04:19,520
This gives you the same
information as the facet figure,

95
00:04:19,520 --> 00:04:22,440
but with just a little
more visual flare.

96
00:04:22,810 --> 00:04:25,550
Coming up I'll talk
in more detail about

97
00:04:25,550 --> 00:04:27,440
the different ways to
control the animations

98
00:04:27,440 --> 00:04:31,280
that you make the gganimate
and some other details.

99
00:04:31,280 --> 00:04:34,340
So keep your R code open
and when you're ready,

100
00:04:34,340 --> 00:04:36,450
go on to the next video.