Now that we've learned to make a wide variety of
different visualizations, another trick in our bag will be making those
visualizations animated. If a picture says
a thousand words, a moving picture, I
suppose says more. So some crafted developers
have developed a way to turn our ggplot visualizations
into moving images. This is based on a
package called gganimate. Basically what gganimate
does is it takes a ggplot figure and creates many different
versions of it, changing a single parameter in the data so the visual changes by one click of that parameter for each
frame and the animation. This is harder to understand in the abstract than in practice, so we'll try to move
forward quickly here. Two good sources for learning
how animations work using gganimate are the official
documentation for gganimate at
gganimate.com and also the R Graph galleries section on interactive visualizations. The materials in this
video are adapted from what you find
on those websites. As a gganimate
documentation indicates, building an animation
can get pretty complex. So what I'm going
to in this video is give you a verbal walk-through of one of the examples
from that documentation. Then in subsequent videos, we'll go into a little bit
more detail about each step. So follow along now with the R code associated
with this video. Then you'll need to install
several R packages. Let me start by making a
simple animation based on that example from the
gganimate documentation. What this animation
does is it creates boxplots for the fuel
efficiency of cars with different numbers of
cylinders in their engines with different numbers of
gears in their transmissions. First we'll do a static
version of this plot and this is easy
review for us by now. We call a ggplot load
the mtcars data, and we set our x
and y aesthetics. In this data, syl or cylinder is a numeric variable and we want to treat
that as categorical, so we will wrap that in
the factor function. Then for the y aesthetic, we'll use miles per gallon
for fuel efficiency. By adding a geom-boxplot, we now see the distribution of the miles per gallon
for different 4, 6, and 8 cylinder cars. As we expect when we do this, the cars with more cylinders and therefore bigger engines, are less fuel efficient. Now there's this
other variable in the empty cars data for gears, with values of 3, 4, or 5. This indicates how many gears there are in the transmission. Let's say that we wanted
to know how miles per gallon changed as a function of the number of
cylinders in the engine, broken down across
vehicles that have 3, 4, or 5 gears in
the transmission. We can display this using the
facet wrap function telling R to make separate figures on the basis of the
gearing for the car. Again, this is all
review for you. This is perfectly fine and the static visual is very useful. But let's say that we
wanted to manipulate this, so that we have a single
figure that changes. What we do is we swap out our facet wrap function with a transitions states function, and that comes from
the gganimate package. We'll go over more
the details later. But with transition states, what you're doing is you can
indicate the variable in the data that you want to
change across animations. We'll specify that here and we'll save this figure to an object. If we run the object, R is going to render the different frames
of the animation. When you run it, you'll see
that animation will move between the different states
that we specified here. This gives you the same
information as the facet figure, but with just a little
more visual flare. Coming up I'll talk
in more detail about the different ways to
control the animations that you make the gganimate
and some other details. So keep your R code open
and when you're ready, go on to the next video.