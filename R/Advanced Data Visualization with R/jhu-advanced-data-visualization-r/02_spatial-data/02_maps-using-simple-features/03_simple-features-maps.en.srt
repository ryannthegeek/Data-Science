1
00:00:00,040 --> 00:00:01,744
The maps that we've drawn so

2
00:00:01,744 --> 00:00:05,020
far have drawn on data built
into the Maps package in R.

3
00:00:06,190 --> 00:00:09,541
This may be all you need if you're
just drawing simple maps, and

4
00:00:09,541 --> 00:00:12,910
you have data that can be plotted
using longitude and latitude.

5
00:00:14,420 --> 00:00:18,000
However, R has the ability to use
other kinds of geographic data.

6
00:00:19,320 --> 00:00:22,633
One of the newer, and
increasingly popular systems for

7
00:00:22,633 --> 00:00:27,580
storing and distributing geospatial
information is the simple features format.

8
00:00:28,580 --> 00:00:32,191
And you can read data encoded in
simple features format into R, and

9
00:00:32,191 --> 00:00:35,545
this really opens up different
kinds of maps you can draw, and

10
00:00:35,545 --> 00:00:38,150
the different kind of
data sources you can use.

11
00:00:39,930 --> 00:00:45,041
Specifically, using the tools for
simple features in R, you can download and

12
00:00:45,041 --> 00:00:50,398
use two very common formats for geographic
data, Shapefiles and GeoJSON files.

13
00:00:54,330 --> 00:00:58,396
There are many, many sources for
Shapefiles and GeoJSON files, but

14
00:00:58,396 --> 00:01:03,094
the US Census Bureau Bureau is a great
data source that's very well organized,

15
00:01:03,094 --> 00:01:05,710
and we can get some good
examples from that.

16
00:01:07,720 --> 00:01:12,564
For instance, I found this data that I'm
using here by using a Google search for

17
00:01:12,564 --> 00:01:14,020
US Census Shapefiles.

18
00:01:15,710 --> 00:01:20,371
When you're reading a Shapefile,
they come with a set of associated files.

19
00:01:20,371 --> 00:01:25,385
And you want to take the .shp file, the
Shapefile and all the associated files and

20
00:01:25,385 --> 00:01:30,272
put them in the same folder on your
computer, when you're working with them.

21
00:01:30,272 --> 00:01:33,057
And you want to set that as
the working directory in R.

22
00:01:37,560 --> 00:01:41,068
Now download the SF Library, and
load that library into your R session.

23
00:01:44,360 --> 00:01:50,960
To read a .shp file or a Shapefile,
we use the read_SF command.

24
00:01:50,960 --> 00:01:52,786
And we can assign the results
to an object in R.

25
00:01:55,800 --> 00:01:58,032
Take a second and inspect this.

26
00:01:58,032 --> 00:02:02,170
You see that essentially
it's a 56 by 15 table.

27
00:02:02,170 --> 00:02:05,630
With a number of different columns
that are coded in a certain way.

28
00:02:07,130 --> 00:02:11,498
The documentation for these columns,
which is the code book for the data,

29
00:02:11,498 --> 00:02:13,590
is available on the US Census site.

30
00:02:15,090 --> 00:02:18,384
But looking at this, you can see,
just by inspecting it,

31
00:02:18,384 --> 00:02:21,545
that there's this state
abbreviations column, and so

32
00:02:21,545 --> 00:02:24,790
there's one row for
each US state and a few territories.

33
00:02:29,371 --> 00:02:31,592
We're ready to go ahead and
make a map now.

34
00:02:31,592 --> 00:02:36,120
So, call up ggplot, set the data to
the states object that we created.

35
00:02:36,120 --> 00:02:43,110
And now we add a special geom for
mapping the simple features data, geom_SF.

36
00:02:45,220 --> 00:02:50,037
Your computer may take a minute to
render this map because it's pretty big,

37
00:02:50,037 --> 00:02:52,053
but eventually it will do it.

38
00:02:52,053 --> 00:02:55,588
This map is not exactly user-friendly
because it plots a lot of

39
00:02:55,588 --> 00:03:00,060
outlying territories, and there's always
this problem of mapping Alaska and

40
00:03:00,060 --> 00:03:02,683
Hawaii with the continental
states in the US.

41
00:03:05,630 --> 00:03:09,685
Because this is such a common problem, a
smart developer out there wrote a special

42
00:03:09,685 --> 00:03:13,684
package that includes a projection of
the United States that includes Alaska and

43
00:03:13,684 --> 00:03:15,830
Hawaii in the simple features framework.

44
00:03:18,940 --> 00:03:22,782
We need to install a special package for
this, the AlbersUSA Library.

45
00:03:22,782 --> 00:03:28,250
And once we get that library loaded into
R, we can use it to draw a map of the US.

46
00:03:28,250 --> 00:03:31,174
Using that USA_SF file as the data.

47
00:03:36,350 --> 00:03:40,773
One more quick thing to cover here, it's
worthwhile to show you now how to draw

48
00:03:40,773 --> 00:03:43,270
a map using GeoJSON information, as well.

49
00:03:44,790 --> 00:03:48,073
A GeoJSON is just another
common format for spatial data,

50
00:03:48,073 --> 00:03:52,240
and you've got an example GeoJSON file
in the materials for this lesson.

51
00:03:55,020 --> 00:03:59,060
This GeoJSON file is a map of
counties around Seattle, WA.

52
00:04:00,950 --> 00:04:05,525
To use this file, you point your read
SF command to the GeoJSON file, and

53
00:04:05,525 --> 00:04:08,340
you load it up into an R object.

54
00:04:08,340 --> 00:04:11,482
And then we're able to map this in just
the same way as we did with the Shapefile.

55
00:04:19,290 --> 00:04:23,164
Now that we know how to draw maps
using Shape and GeoJSON files and

56
00:04:23,164 --> 00:04:27,060
the SF package, we register
adding information to these maps.

57
00:04:28,480 --> 00:04:30,550
There are two ways that you
can go about doing this.

58
00:04:31,890 --> 00:04:37,520
First, you can add data to the object
you create from Shape or GeoJSON files.

59
00:04:39,660 --> 00:04:43,163
Or, alternatively, these files also
sometimes come with information embedded

60
00:04:43,163 --> 00:04:46,170
in them, and you can just draw on
that when you're drawing your maps.

61
00:04:50,437 --> 00:04:53,617
To start from the beginning we'll use
the method of adding our own data to

62
00:04:53,617 --> 00:04:55,670
the object that we create
with the Shapefile.

63
00:04:55,670 --> 00:04:58,348
This will become more clear in just
a minute when we actually do it.

64
00:05:01,980 --> 00:05:04,780
To begin, you call up the map
of the United States, again,

65
00:05:04,780 --> 00:05:06,522
using the US Census Data Shapefile.

66
00:05:09,110 --> 00:05:13,085
And this time let's filter the data so
that we only have the states of Kansas,

67
00:05:13,085 --> 00:05:15,820
Nebraska, Iowa, and Missouri.

68
00:05:15,820 --> 00:05:19,895
You can either set this filter
using the postal code column here,

69
00:05:19,895 --> 00:05:23,389
which is STUSPS or
the FIPS Code, the F-I-P-S Code.

70
00:05:26,980 --> 00:05:29,613
You can go to find information
about FIPS online.

71
00:05:29,613 --> 00:05:33,303
It's easy to Google, but these are just
special codes that the United States

72
00:05:33,303 --> 00:05:35,756
government uses to classify
states numerically.

73
00:05:39,040 --> 00:05:41,398
So let's do a filter command
using the FIPS codes and

74
00:05:41,398 --> 00:05:42,961
draw the map of these four states.

75
00:05:47,080 --> 00:05:51,403
And we'll start by transforming this blank
map into a choropleth with colors in for

76
00:05:51,403 --> 00:05:52,650
the different states.

77
00:05:55,950 --> 00:05:59,960
We'll make for demonstration purposes,
just a simple dummy dataset consisting of

78
00:05:59,960 --> 00:06:02,341
the state codes and
four letters of the alphabet.

79
00:06:06,380 --> 00:06:11,580
We can then merge this data to our
map data using the left join command.

80
00:06:14,079 --> 00:06:16,973
And we could do exactly the same thing
here with the vector of quantitative

81
00:06:16,973 --> 00:06:18,244
information, if we wanted to.

82
00:06:22,010 --> 00:06:26,518
Once we have the dataset merged, we can
use ggplot, again, and plot this data.

83
00:06:26,518 --> 00:06:29,783
Setting the field to our new
variable that we've created,

84
00:06:29,783 --> 00:06:33,360
and you'll see that you
create the choropleth.

85
00:06:33,360 --> 00:06:36,885
This is very similar to what we've already
done when we when we were using geom

86
00:06:36,885 --> 00:06:37,764
polygon earlier.

87
00:06:44,020 --> 00:06:47,814
By this point, you probably have
a suspicion about how to draw points on

88
00:06:47,814 --> 00:06:49,660
a map using simple features data.

89
00:06:50,960 --> 00:06:54,272
If we have a data frame that has
latitude and longitude coordinates,

90
00:06:54,272 --> 00:06:57,599
we can draw points right on top of
that with the geom points function.

91
00:07:01,920 --> 00:07:06,367
Again, just for an example here, remember
that we have latitude and longitude for

92
00:07:06,367 --> 00:07:09,690
many of the world cities
in the Max package in R.

93
00:07:09,690 --> 00:07:13,045
So let's call that up and do a filter
command that pulls out a few cities in

94
00:07:13,045 --> 00:07:14,757
the four states that we've mapped.

95
00:07:17,830 --> 00:07:19,575
Now we can put those points
directly onto the plot.

96
00:07:23,670 --> 00:07:26,895
We can also add labels to these
points in the same way, more or less,

97
00:07:26,895 --> 00:07:29,570
that we did when we were
labeling simple scatter plots.

98
00:07:31,050 --> 00:07:34,625
Using the geom text repel command
from the ggrepel package,

99
00:07:34,625 --> 00:07:39,128
we can add those labels drawing from
the name column in our geographic data.