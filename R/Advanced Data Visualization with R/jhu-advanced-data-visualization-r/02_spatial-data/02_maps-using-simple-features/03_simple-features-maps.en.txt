The maps that we've drawn so far have drawn on data built
into the Maps package in R. This may be all you need if you're
just drawing simple maps, and you have data that can be plotted
using longitude and latitude. However, R has the ability to use
other kinds of geographic data. One of the newer, and
increasingly popular systems for storing and distributing geospatial
information is the simple features format. And you can read data encoded in
simple features format into R, and this really opens up different
kinds of maps you can draw, and the different kind of
data sources you can use. Specifically, using the tools for
simple features in R, you can download and use two very common formats for geographic
data, Shapefiles and GeoJSON files. There are many, many sources for
Shapefiles and GeoJSON files, but the US Census Bureau Bureau is a great
data source that's very well organized, and we can get some good
examples from that. For instance, I found this data that I'm
using here by using a Google search for US Census Shapefiles. When you're reading a Shapefile,
they come with a set of associated files. And you want to take the .shp file, the
Shapefile and all the associated files and put them in the same folder on your
computer, when you're working with them. And you want to set that as
the working directory in R. Now download the SF Library, and
load that library into your R session. To read a .shp file or a Shapefile,
we use the read_SF command. And we can assign the results
to an object in R. Take a second and inspect this. You see that essentially
it's a 56 by 15 table. With a number of different columns
that are coded in a certain way. The documentation for these columns,
which is the code book for the data, is available on the US Census site. But looking at this, you can see,
just by inspecting it, that there's this state
abbreviations column, and so there's one row for
each US state and a few territories. We're ready to go ahead and
make a map now. So, call up ggplot, set the data to
the states object that we created. And now we add a special geom for
mapping the simple features data, geom_SF. Your computer may take a minute to
render this map because it's pretty big, but eventually it will do it. This map is not exactly user-friendly
because it plots a lot of outlying territories, and there's always
this problem of mapping Alaska and Hawaii with the continental
states in the US. Because this is such a common problem, a
smart developer out there wrote a special package that includes a projection of
the United States that includes Alaska and Hawaii in the simple features framework. We need to install a special package for
this, the AlbersUSA Library. And once we get that library loaded into
R, we can use it to draw a map of the US. Using that USA_SF file as the data. One more quick thing to cover here, it's
worthwhile to show you now how to draw a map using GeoJSON information, as well. A GeoJSON is just another
common format for spatial data, and you've got an example GeoJSON file
in the materials for this lesson. This GeoJSON file is a map of
counties around Seattle, WA. To use this file, you point your read
SF command to the GeoJSON file, and you load it up into an R object. And then we're able to map this in just
the same way as we did with the Shapefile. Now that we know how to draw maps
using Shape and GeoJSON files and the SF package, we register
adding information to these maps. There are two ways that you
can go about doing this. First, you can add data to the object
you create from Shape or GeoJSON files. Or, alternatively, these files also
sometimes come with information embedded in them, and you can just draw on
that when you're drawing your maps. To start from the beginning we'll use
the method of adding our own data to the object that we create
with the Shapefile. This will become more clear in just
a minute when we actually do it. To begin, you call up the map
of the United States, again, using the US Census Data Shapefile. And this time let's filter the data so
that we only have the states of Kansas, Nebraska, Iowa, and Missouri. You can either set this filter
using the postal code column here, which is STUSPS or
the FIPS Code, the F-I-P-S Code. You can go to find information
about FIPS online. It's easy to Google, but these are just
special codes that the United States government uses to classify
states numerically. So let's do a filter command
using the FIPS codes and draw the map of these four states. And we'll start by transforming this blank
map into a choropleth with colors in for the different states. We'll make for demonstration purposes,
just a simple dummy dataset consisting of the state codes and
four letters of the alphabet. We can then merge this data to our
map data using the left join command. And we could do exactly the same thing
here with the vector of quantitative information, if we wanted to. Once we have the dataset merged, we can
use ggplot, again, and plot this data. Setting the field to our new
variable that we've created, and you'll see that you
create the choropleth. This is very similar to what we've already
done when we when we were using geom polygon earlier. By this point, you probably have
a suspicion about how to draw points on a map using simple features data. If we have a data frame that has
latitude and longitude coordinates, we can draw points right on top of
that with the geom points function. Again, just for an example here, remember
that we have latitude and longitude for many of the world cities
in the Max package in R. So let's call that up and do a filter
command that pulls out a few cities in the four states that we've mapped. Now we can put those points
directly onto the plot. We can also add labels to these
points in the same way, more or less, that we did when we were
labeling simple scatter plots. Using the geom text repel command
from the ggrepel package, we can add those labels drawing from
the name column in our geographic data.